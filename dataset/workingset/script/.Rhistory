vimval19<-append(vimval19,df[p1f,2],after=length(vimval19))
}
mindepval19
df
names(bf$varselect)
names(bf$varselect)[1]
names(bf$varselect[1])
names(df)
names(df)
names(df)[0]
names(df[0])
names(df)
df$SEX
rownames(df)
colnamelist[1]
rownames(df)==colnamelist[j]
rownames(df)==colnamelist[1]
mindepval19<-c()
mindepval19<-append(mindepval19,df[p1f,1],after=length(mindepval19))
mindepval19
colnamelist
colnamelist[j]
append(mindepval19,df[p1f,1],after=length(mindepval19))
df[p1f,1]
df[1,1]
mindepval19<-c()
vimval19<-c()
for(j in 1:55){
p1f=rownames(df)==colnamelist[j]
mindepval19<-append(mindepval19,df[p1f,1],after=length(mindepval19))
vimval19<-append(vimval19,df[p1f,2],after=length(vimval19))
}
mindepval19
vimval19
df
dim(df)
bf$varselect
dim(colnamelist)
colnamelist
colnamelist[54]
mindepval19<-c()
p1f=rownames(df)==colnamelist[1]
mindepval19<-append(mindepval19,df[p1f,1],after=length(mindepval19))
mindepval19
p1f=rownames(df)==colnamelist[2]
mindepval19<-append(mindepval19,df[p1f,1],after=length(mindepval19))
mindepval19
for(j in 3:54){
p1f=rownames(df)==colnamelist[j]
mindepval19<-append(mindepval19,df[p1f,1],after=length(mindepval19))}
mindepval19
mindepval19<-c()
vimval19<-c()
for(j in 1:54){
p1f=rownames(df)==colnamelist[j]
mindepval19<-append(mindepval19,df[p1f,1],after=length(mindepval19))}
vimval19<-append(vimval19,df[p1f,2],after=length(vimval19))
}
mindepval19<-c()
vimval19<-c()
for(j in 1:54){
p1f=rownames(df)==colnamelist[j]
mindepval19<-append(mindepval19,df[p1f,1],after=length(mindepval19))
vimval19<-append(vimval19,df[p1f,2],after=length(vimval19))
}
mindepval19
mindep_dataf<-read.table(paste("input/finaldatainput"), header=TRUE)
random_seed<-read.table(paste("input/random_seed"), header=FALSE)
x=dim(random_seed)[1] #500
x=3
min_depth19<-matrix(0,nrow=x,ncol=56)
vim19<-matrix(0,nrow=x,ncol=56)
colnamelist<-c(names(mindep_dataf)[1],names(mindep_dataf)[3:55])
for(l in 1:x){
set.seed(random_seed[l,])
#set.seed(random_seed[1,])
bf<-var.select(SCID_AgeOnset~.,mindep_dataf,ntree=1000,mtry=19)
df<-bf$varselect
mindepval19<-c()
vimval19<-c()
for(j in 1:54){
p1f=rownames(df)==colnamelist[j]
mindepval19<-append(mindepval19,df[p1f,1],after=length(mindepval19))
vimval19<-append(vimval19,df[p1f,2],after=length(vimval19))
}
min_depth19[l,]<-c(random_seed[l,],mindepval19)
vim19[l,]<-c(random_seed[l,],vimval19)
}
x=dim(random_seed)[1] #500
x=3
min_depth19<-matrix(0,nrow=x,ncol=54)
vim19<-matrix(0,nrow=x,ncol=54)
colnamelist<-c(names(mindep_dataf)[1],names(mindep_dataf)[3:55])
for(l in 1:x){
set.seed(random_seed[l,])
#set.seed(random_seed[1,])
bf<-var.select(SCID_AgeOnset~.,mindep_dataf,ntree=1000,mtry=19)
df<-bf$varselect
mindepval19<-c()
vimval19<-c()
for(j in 1:54){
p1f=rownames(df)==colnamelist[j]
mindepval19<-append(mindepval19,df[p1f,1],after=length(mindepval19))
vimval19<-append(vimval19,df[p1f,2],after=length(vimval19))
}
min_depth19[l,]<-c(random_seed[l,],mindepval19)
vim19[l,]<-c(random_seed[l,],vimval19)
}
x=dim(random_seed)[1] #500
x=3
min_depth19<-matrix(0,nrow=x,ncol=55)
vim19<-matrix(0,nrow=x,ncol=55)
colnamelist<-c(names(mindep_dataf)[1],names(mindep_dataf)[3:55])
for(l in 1:x){
set.seed(random_seed[l,])
#set.seed(random_seed[1,])
bf<-var.select(SCID_AgeOnset~.,mindep_dataf,ntree=1000,mtry=19)
df<-bf$varselect
mindepval19<-c()
vimval19<-c()
for(j in 1:54){
p1f=rownames(df)==colnamelist[j]
mindepval19<-append(mindepval19,df[p1f,1],after=length(mindepval19))
vimval19<-append(vimval19,df[p1f,2],after=length(vimval19))
}
min_depth19[l,]<-c(random_seed[l,],mindepval19)
vim19[l,]<-c(random_seed[l,],vimval19)
}
min_depth19
vim19
colnames(min_depth19)<-c(print("rseeds"),colnamelist)
colnames(vim19)<-c(print("rseeds"),colnamelist)
vim19
quit()
rjungleExe <- file.path("/to/executable/rjungle")
rjungleInFile <- file.path("input/finaldatainput")
rjungleOutFile <- file.path("output/rjungle")
rjunglePermCMD <- paste(rjungleExe, 
"-f", 
rjungleInFile, "-v", ## show processing
"-i2", ## chose permutation-Importance
"--mtry=19",
"-t1000", ## 1000 trees
"-D type", ## response variable name
"-z random_seed[i,]"
"-o", 
rjungleOutFile) ## out file path
rjunglePermCMD <- paste(
rjungleExe, 
"-f", 
rjungleInFile, "-v", ## show processing
"-i2", ## chose permutation-Importance
"--mtry=19",
"-t1000", ## 1000 trees
"-D type", ## response variable name
"-z random_seed[i,]"
"-o", 
rjungleOutFile
## Run Random Jungle
rjunglePermCMD <- paste(rjungleExe,"-f", rjungleInFile, "-v", 
"-i2",
"--mtry=19",
"-t1000",
"-D type", 
"-z random_seed[i,]"
"-o", 
rjungleOutFile
n=2
for(i in 1:n){
## Run Random Jungle
rjunglePermCMD <- paste(rjungleExe,"-f", rjungleInFile, "-v", 
"-i2",
"--mtry=19",
"-t1000",
"-D type", 
"-z random_seed[i,]"
"-o", 
rjungleOutFile
) ## out file path.
rjunglePermCMD <- paste(rjungleExe,"-f", rjungleInFile, "-v", 
n=3
for(i in 1:n){
## Run Random Jungle
rjunglePermCMD <- paste(rjungleExe,"-f", rjungleInFile, "-v", ## show processing
"-i2", ## chose permutation-Importance
"--mtry=19",
"-t1000", ## 1000 trees
"-D type", ## response variable name
"-z random_seed[i,]",
"-o", 
rjungleOutFile
) ## out file path
}
n=3
for(i in 1:n){
## Run Random Jungle
rjunglePermCMD <- paste(rjungleExe,"-f", rjungleInFile, "-v", ## show processing
"-i2", ## chose permutation-Importance
"--mtry=19",
"-t1000", ## 1000 trees
"-D type", ## response variable name
"-z random_seed[i,]",
"-o", 
rjungleOutFile
) ## out file path
rjunglePermCMD
}
rjunglePermCMD
for(i in 1:n){
## Run Random Jungle
rjunglePermCMD <- paste(rjungleExe,"-f", rjungleInFile, "-v", ## show processing
"-i2", ## chose permutation-Importance
"-m 19",
"-t 1000", ## 1000 trees
"-D type", ## response variable name
"-z",
random_seed[i,],
"-o", 
rjungleOutFile
) ## out file path
}
rjunglePermCMD
quit
quit()
data_VIM<-read.table(paste("output/varVIM"), header=TRUE)
data_VIMAUC<-read.table(paste("output/varVIMAUC"), header=TRUE)
names(data_VIMAUC)
names(data_VIM)
sorted.data_VIM <- data_VIM[order(data_VIM[,2])
]
sorted.data_VIM <- data_VIM[order(data_VIM[,2])]
sorted.data_VIM <- data_VIM[order(data_VIM[,2]),]
names(sorted.data_VIM)
data_VIM[1,]
sorted.data_VIM[1,]
sorted.data_VIM[1,]
sorted.data_VIM[1:2,]
sorted.data_VIM <- data_VIM[,order(colnames(data_VIM))]
sorted.data_VIM
names(sorted.data_VIM)
clear
quit()
random_seed<-read.table(paste("input/random_seed"), header=FALSE)
random_seed
quit()
library(party)
dataf<-read.table(paste("input/finaldatainput"), header=TRUE)
random_seed<-read.table(paste("input/random_seed"), header=FALSE)
n=dim(random_seed)[1] #500
n=3
varimp<-matrix(0,nrow=n,ncol=55)
varimpAUC<-matrix(0,nrow=n,ncol=55)
for(i in 2:n){
set.seed(random_seed[i,])
control<-cforest_control(mtry=19,ntree=1000)
RFf<-cforest(SCID_AgeOnset~.,data=dataf,controls=control)
#varimp[i,]<-c(random_seed[i,],varimp(RFf))
#varimpAUC[i,]<-c(random_seed[i,],varimpAUC(RFf))
varimp[i,]<-varimp(RFf)
varimpAUC[i,]<-varimpAUC(RFf)
}
library(party)
dataf<-read.table(paste("input/finaldatainput"), header=TRUE)
random_seed<-read.table(paste("input/random_seed"), header=FALSE)
n=dim(random_seed)[1] #500
n=3
varimp<-matrix(0,nrow=n,ncol=54)
varimpAUC<-matrix(0,nrow=n,ncol=54)
for(i in 2:n){
set.seed(random_seed[i,])
control<-cforest_control(mtry=19,ntree=1000)
RFf<-cforest(SCID_AgeOnset~.,data=dataf,controls=control)
#varimp[i,]<-c(random_seed[i,],varimp(RFf))
#varimpAUC[i,]<-c(random_seed[i,],varimpAUC(RFf))
varimp[i,]<-varimp(RFf)
varimpAUC[i,]<-varimpAUC(RFf)
}
varimp
library(party)
dataf<-read.table(paste("input/finaldatainput"), header=TRUE)
random_seed<-read.table(paste("input/random_seed"), header=FALSE)
n=dim(random_seed)[1] #500
n=3
varimp<-matrix(0,nrow=n,ncol=54)
varimpAUC<-matrix(0,nrow=n,ncol=54)
for(i in 1:n){
set.seed(random_seed[i+1,])
control<-cforest_control(mtry=19,ntree=1000)
RFf<-cforest(SCID_AgeOnset~.,data=dataf,controls=control)
#varimp[i,]<-c(random_seed[i,],varimp(RFf))
#varimpAUC[i,]<-c(random_seed[i,],varimpAUC(RFf))
varimp[i,]<-varimp(RFf)
varimpAUC[i,]<-varimpAUC(RFf)
}
carimp
varimp
random_seed[502]
random_seed[501]
random_seed[500]
random_seed
random_seed[502,]
random_seed[501,]
dim(random_seed)[1]
dim(random_seed)[1] -1
n=dim(random_seed)[1] -1
n=dim(random_seed)[1]-1
n=(dim(random_seed)[1])-1
n=(dim(random_seed)[1])
n-1
n=dim(random_seed)[1] #500
n=n-1
n
random_seed[1,]
random_seed[2,]
colnames(varimp)<-c(names(dataf)[1],names(dataf)[3:55])
colnames(varimpAUC)<-c(names(dataf)[1],names(dataf)[3:55])
varimp
colnames(random_seed)<-paste("rseed")
varimp<-cbind(random_seed,varimp)
varimp
varimp[1]
varimp[1,]
rj.importance<-read.table(paste("output/rj.importance"), header=TRUE)
rj.importance
rj.importance[1,]
rj.importance[3,]
random_seed[3,]
random_seed[4,]
library(party)
dataf<-read.table(paste("input/finaldatainput"), header=TRUE)
random_seed<-read.table(paste("input/random_seed"), header=FALSE)
n=dim(random_seed)[1] #500
n=n-1
n=3
varimp<-matrix(0,nrow=n,ncol=54)
varimpAUC<-matrix(0,nrow=n,ncol=54)
for(i in 1:n){
set.seed(random_seed[i+1,])
control<-cforest_control(mtry=19,ntree=1000)
RFf<-cforest(SCID_AgeOnset~.,data=dataf,controls=control)
#varimp[i,]<-c(random_seed[i,],varimp(RFf))
#varimpAUC[i,]<-c(random_seed[i,],varimpAUC(RFf))
varimp[i,]<-varimp(RFf)
varimpAUC[i,]<-varimpAUC(RFf)
}
varimp
x<-varimp(RFf)
x
c(names(dataf)[1],names(dataf)[3:55])
x[,4]
x[4,]
x[1\,]
x[1,]
x[4]
c(names(dataf)[1],names(dataf)[3:55])[4]
colnames(varimp)<-c(names(dataf)[1],names(dataf)[3:55])
colnames(varimpAUC)<-c(names(dataf)[1],names(dataf)[3:55])
varimp
varimp[,order(varimp[1,])]
varimp[1,]
varimp[2,]
varimp[,order(colnames(varimp))]
rj.importance<-read.table(paste("output/rj.importance"), header=TRUE)
rj.importance[1:3,]
varimp[,order(colnames(varimp))]
varimp
q()
ls()
dim(carimp)
dim(varimp)
varimp
ls()
dim(rj.importance)
rj.importance
rj.importance[1,]
rj.importance[1:3,]
q()
ibrary(randomForestSRC)
mindep_dataf<-read.table(paste("input/finaldatainput"), header=TRUE)
random_seed<-read.table(paste("input/random_seed"), header=FALSE)
x=dim(random_seed)[1] #500
x=x-1
x=3
min_depth19<-matrix(0,nrow=x,ncol=54)
vim19<-matrix(0,nrow=x,ncol=54)
colnamelist<-c(names(mindep_dataf)[1],names(mindep_dataf)[3:55])
for(l in 1:x){
set.seed(random_seed[l+1,])
#set.seed(random_seed[1,])
bf<-var.select(SCID_AgeOnset~.,mindep_dataf,ntree=1000,mtry=19)
df<-bf$varselect
mindepval19<-c()
vimval19<-c()
for(j in 1:54){
p1f=rownames(df)==colnamelist[j]
mindepval19<-append(mindepval19,df[p1f,1],after=length(mindepval19))
vimval19<-append(vimval19,df[p1f,2],after=length(vimval19))
}
#min_depth19[l,]<-c(random_seed[l,],mindepval19)
#vim19[l,]<-c(random_seed[l,],vimval19)
min_depth19[l,]<-mindepval19
vim19[l,]<-vimval19
}
#colnames(min_depth19)<-c(print("rseeds"),colnamelist)
#colnames(vim19)<-c(print("rseeds"),colnamelist)
colnames(min_depth19)<-colnamelist
colnames(vim19)<-colnamelist
min_depth19<-min_depth19[,order(colnames(min_depth19))]
ibrary(randomForestSRC)
mindep_dataf<-read.table(paste("input/finaldatainput"), header=TRUE)
random_seed<-read.table(paste("input/random_seed"), header=FALSE)
x=dim(random_seed)[1] #500
x=x-1
x=3
min_depth19<-matrix(0,nrow=x,ncol=54)
vim19<-matrix(0,nrow=x,ncol=54)
colnamelist<-c(names(mindep_dataf)[1],names(mindep_dataf)[3:55])
for(l in 1:x){
set.seed(random_seed[l+1,])
#set.seed(random_seed[1,])
bf<-var.select(SCID_AgeOnset~.,mindep_dataf,ntree=1000,mtry=19)
df<-bf$varselect
mindepval19<-c()
vimval19<-c()
for(j in 1:54){
p1f=rownames(df)==colnamelist[j]
mindepval19<-append(mindepval19,df[p1f,1],after=length(mindepval19))
vimval19<-append(vimval19,df[p1f,2],after=length(vimval19))
}
#min_depth19[l,]<-c(random_seed[l,],mindepval19)
#vim19[l,]<-c(random_seed[l,],vimval19)
min_depth19[l,]<-mindepval19
vim19[l,]<-vimval19
}
#colnames(min_depth19)<-c(print("rseeds"),colnamelist)
#colnames(vim19)<-c(print("rseeds"),colnamelist)
colnames(min_depth19)<-colnamelist
colnames(vim19)<-colnamelist
min_depth19<-min_depth19[,order(colnames(min_depth19))]
library(randomForestSRC)
mindep_dataf<-read.table(paste("input/finaldatainput"), header=TRUE)
random_seed<-read.table(paste("input/random_seed"), header=FALSE)
x=dim(random_seed)[1] #500
x=x-1
x=3
min_depth19<-matrix(0,nrow=x,ncol=54)
vim19<-matrix(0,nrow=x,ncol=54)
colnamelist<-c(names(mindep_dataf)[1],names(mindep_dataf)[3:55])
for(l in 1:x){
set.seed(random_seed[l+1,])
#set.seed(random_seed[1,])
bf<-var.select(SCID_AgeOnset~.,mindep_dataf,ntree=1000,mtry=19)
df<-bf$varselect
mindepval19<-c()
vimval19<-c()
for(j in 1:54){
p1f=rownames(df)==colnamelist[j]
mindepval19<-append(mindepval19,df[p1f,1],after=length(mindepval19))
vimval19<-append(vimval19,df[p1f,2],after=length(vimval19))
}
#min_depth19[l,]<-c(random_seed[l,],mindepval19)
#vim19[l,]<-c(random_seed[l,],vimval19)
min_depth19[l,]<-mindepval19
vim19[l,]<-vimval19
}
#colnames(min_depth19)<-c(print("rseeds"),colnamelist)
#colnames(vim19)<-c(print("rseeds"),colnamelist)
colnames(min_depth19)<-colnamelist
colnames(vim19)<-colnamelist
min_depth19<-min_depth19[,order(colnames(min_depth19))]
vim19<-vim19[,order(colnames(vim19))]
vim19
q()
mindep_dataf<-read.table(paste("input/finaldatainput"), header=TRUE)

mindep_dataf[1,]
mindep_dataf[,2]
stem(mindep_dataf[,2])
stem(mindep_dataf[,2],replace=FALSE)
stem(sample(mindep_dataf[,2],replace=FALSE))
sample(mindep_dataf[,2],replace=FALSE)
scrambled.dataf<-cbind(sample(mindep_dataf[,2],replace=FALSE),mindep_dataf[,1],mindep_dataf[,3:54])
scrambled.dataf
scrambled.dataf[1:5,]
names(mindep_dataf)
names(mindep_dataf)[1]
mindep_dataf<-read.table(paste("input/finaldatainput"), header=TRUE)
IDD<-mindep_dataf[,1]
colnames(IDD)<-names(mindep_dataf)[1]
AgeonSet<-sample(mindep_dataf[,2],replace=FALSE)
colnames(AgeonSet)<-names(mindep_dataf)[2]
IDD<-mindep_dataf[,1]
colnames(IDD)<-names(mindep_dataf)[1]
IDD
IDD[1,]
IDD[2]
IDD[1:5]
names(mindep_dataf)[1]
colnames(IDD)<-names(mindep_dataf)[1]
scrambled.dataf<-cbind(AgeonSet,IDD,mindep_dataf[,3:54])
scrambled.dataf[1:5,]
names(mindep_dataf)
IID<-mindep_dataf[,1]
AgeonSCID_AgeOnsetSet<-sample(mindep_dataf[,2],replace=FALSE)
scrambled.dataf<-cbind(SCID_AgeOnset,IID,mindep_dataf[,3:54])
IID<-mindep_dataf[,1]
SCID_AgeOnset<-sample(mindep_dataf[,2],replace=FALSE)
scrambled.dataf<-cbind(SCID_AgeOnset,IID,mindep_dataf[,3:54])
scrambled.dataf[1:5,]
mindep_dataf[1:5,]
write.table(scrambled.dataf, "input/finaldatainput.scrambled", row.names=FALSE, col.names=TRUE,quote=FALSE)
quit()
